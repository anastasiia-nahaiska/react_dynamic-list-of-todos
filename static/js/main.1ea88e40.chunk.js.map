{"version":3,"sources":["components/TodoFilter/TodoFilter.tsx","components/TodoList/TodoList.tsx","api.ts","App.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","index.tsx"],"names":["TodoFilter","React","memo","query","selectFilterType","setVisibleAndAppliedQuery","resetQuery","className","onChange","value","type","placeholder","style","pointerEvents","onClick","TodoList","todos","selectedTodo","map","todo","cn","id","completed","title","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterBy","getUser","userId","Loader","TodoModal","useState","user","setUser","hasLoadingError","setHasLoadingError","useEffect","loadUser","a","userFromApi","color","href","email","name","App","setTodos","isLoaded","setIsLoaded","setSelectedTodo","setQuery","appliedqQuery","setAppliedQuery","ALL","filerBy","setFilterBy","loadTodos","todosFromApi","applyQuery","useCallback","debounce","visibleTodos","useMemo","filteredTodos","filter","toLowerCase","includes","ACTIVE","COMPLETED","getFilteredTodos","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ea88e40.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  query: string;\n  selectFilterType: (filter: React.ChangeEvent<HTMLSelectElement>) => void;\n  setVisibleAndAppliedQuery: (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => void;\n  resetQuery: () => void;\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  query,\n  selectFilterType,\n  setVisibleAndAppliedQuery,\n  resetQuery,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={selectFilterType}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={setVisibleAndAppliedQuery}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            aria-label=\"clear input\"\n            className=\"delete\"\n            onClick={resetQuery}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n));\n","import cn from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  onClick: (todo: Todo | null) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onClick,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className={cn({\n            'has-background-info-light': selectedTodo?.id === todo.id,\n          })}\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={cn(\n              { 'has-text-danger': !todo.completed },\n              { 'has-text-success': todo.completed },\n            )}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onClick(todo)}\n            >\n              <span className=\"icon\">\n                <i className={cn(\n                  'far',\n                  { 'fa-eye': selectedTodo?.id !== todo.id },\n                  { 'fa-eye-slash': selectedTodo?.id === todo.id },\n                )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { debounce } from 'lodash';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoList } from './components/TodoList';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport enum FilterBy {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n\nconst getFilteredTodos = (todos: Todo[], filerBy: FilterBy, query: string) => {\n  const filteredTodos = todos.filter(({ title }) => (\n    title.toLowerCase().includes(query.toLowerCase())\n  ));\n\n  if (filerBy !== FilterBy.ALL) {\n    switch (filerBy) {\n      case FilterBy.ACTIVE:\n        return filteredTodos.filter(({ completed }) => !completed);\n\n      case FilterBy.COMPLETED:\n        return filteredTodos.filter(({ completed }) => completed);\n\n      default:\n        break;\n    }\n  }\n\n  return filteredTodos;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [appliedqQuery, setAppliedQuery] = useState('');\n  const [filerBy, setFilterBy] = useState<FilterBy>(FilterBy.ALL);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  useEffect(() => {\n    const loadTodos = async () => {\n      try {\n        const todosFromApi = await getTodos();\n\n        setTodos(todosFromApi);\n        setIsLoaded(true);\n      } catch (error) {\n        setHasLoadingError(true);\n      }\n    };\n\n    loadTodos();\n  }, []);\n\n  const selectTodo = (todo: Todo | null) => {\n    setSelectedTodo(todo);\n  };\n\n  const resetSelectedTodo = () => {\n    setSelectedTodo(null);\n  };\n\n  const selectFilterType = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilterBy(event.target.value as FilterBy);\n  };\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    [],\n  );\n\n  const setVisibleAndAppliedQuery = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  const resetQuery = () => {\n    setQuery('');\n  };\n\n  const visibleTodos = useMemo(() => {\n    return getFilteredTodos(todos, filerBy, appliedqQuery);\n  }, [todos, filerBy, appliedqQuery]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                selectFilterType={selectFilterType}\n                setVisibleAndAppliedQuery={setVisibleAndAppliedQuery}\n                resetQuery={resetQuery}\n\n              />\n            </div>\n\n            <div className=\"block\">\n              {!hasLoadingError && (\n                isLoaded ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    onClick={selectTodo}\n                    selectedTodo={selectedTodo}\n                  />\n                ) : <Loader />\n              )}\n\n              {hasLoadingError && (\n                <span style={{ color: 'red' }}>\n                  Todos not found\n                </span>\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClick={resetSelectedTodo}\n        />\n      )}\n\n    </>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n  onClick: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todo,\n  onClick,\n}) => {\n  const {\n    id,\n    title,\n    userId,\n    completed,\n  } = todo;\n  const [user, setUser] = useState<User | null>(null);\n  const [hasLoadingError, setHasLoadingError] = useState(false);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const userFromApi = await getUser(userId);\n\n        setUser(userFromApi);\n      } catch (error) {\n        setHasLoadingError(true);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user && !hasLoadingError ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"clear input\"\n              data-cy=\"modal-close\"\n              onClick={onClick}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={cn(\n                'has-text-danger',\n                { 'has-text-success': completed },\n              )}\n              >\n                {completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              {hasLoadingError && (\n                <span style={{ color: 'red' }}>\n                  User not found\n                </span>\n              )}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}